name: Tests

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      NODE_OPTIONS: --experimental-vm-modules
      # Provide a placeholder DB URL; Pool connects lazily and tests that don't query DB won't fail
      DATABASE_URL: postgres://user:password@localhost:5432/testdb
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        id: jest
        run: npm test
        continue-on-error: true

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          if-no-files-found: warn
          retention-days: 30

      - name: Tests summary
        if: always()
        run: |
          node -e "const fs=require('fs');const f='coverage/coverage-summary.json';if(fs.existsSync(f)){const s=JSON.parse(fs.readFileSync(f,'utf8'));const t=s.total;const lines=t.lines?.pct??0;const branches=t.branches?.pct??0;const stmts=t.statements?.pct??0;const funcs=t.functions?.pct??0;fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY,`\n## Test Coverage\n- Lines: ${lines}%\n- Statements: ${stmts}%\n- Branches: ${branches}%\n- Functions: ${funcs}%\n`)}else{fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY,'\nNo coverage summary found. See uploaded artifact.\n')}"

      - name: Annotate test failures
        if: steps.jest.outcome == 'failure'
        run: |
          echo "::error title=Tests failed::One or more tests failed. See the logs above."
          exit 1
